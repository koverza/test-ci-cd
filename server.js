/* eslint-disable no-undef */
// import dotenv from 'dotenv';
// import express from 'express';
// import bodyParser from 'body-parser';
// import axios from 'axios';
// import cors from 'cors';

// dotenv.config();

// const app = express();
// const PORT = 3002;

// app.use(cors());
// app.use(bodyParser.json());

// app.post('/send', async (req, res) => {
//     try {
//         const { name, email, message } = req.body;
//         const text = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:\n\nüë§ –ò–º—è: ${name}\nüìß Email: ${email}\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`;

//         // eslint-disable-next-line no-undef
//         const url = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
//         const response = await axios.post(url, {
//             // eslint-disable-next-line no-undef
//             chat_id: process.env.TELEGRAM_CHAT_ID,
//             text: text,
//             parse_mode: 'HTML'
//         });

//         if (response.data.ok) {
//             res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' });
//         } else {
//             res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!' });
//         }
//     } catch (error) {
//         res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!', error: error.message });
//     }
// });

// app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));

import dotenv from 'dotenv';
import express from 'express';
import bodyParser from 'body-parser';
import nodemailer from 'nodemailer';
import cors from 'cors';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3002;

app.use(cors());
app.use(bodyParser.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nodemailer —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π SMTP-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: Number(process.env.SMTP_PORT),
    secure: process.env.SMTP_SECURE === 'true', // true –¥–ª—è –ø–æ—Ä—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö SSL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 465)
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
    },
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
app.post('/send-email', async (req, res) => {
    try {
        const { name, email, message } = req.body;
        const emailText = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:\n\nüë§ –ò–º—è: ${name}\nüìß Email: ${email}\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`;

        const mailOptions = {
            from: `"–°–∞–π—Ç" <${process.env.SMTP_USER}>`,
            to: process.env.EMAIL_RECEIVER,
            subject: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞',
            text: emailText,
            // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è HTML-–≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ html:
            // html: `<p>${emailText.replace(/\n/g, '<br>')}</p>`
        };

        const info = await transporter.sendMail(mailOptions);
        console.log('Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.response);

        res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email', error: error.message });
    }
});

app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
