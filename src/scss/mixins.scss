@use "sass:math";
@use "./variables" as *;

//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
} // @function percent(50, 200); - Возвращает 25% (50px от 200px)

//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
} // @function rem(32); - Возвращает 2rem (32px / 16px)

//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
} // @function em(32); -  Возвращает 2em (32px / 16px)

@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поїнти в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плаваючого значення
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: (-$widthTo * $slope) + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Отримання значення властивості
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// Якщо негативні значення
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// Встановлюємо значення за замовчуванням
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	// Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Якщо підтримується clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Якщо не підтримується clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}

// Background
@mixin backgroundBg($img, $repeat, $attachment, $size, $position) {
  background: url("@img/#{$img}"); // string
  background-repeat: $repeat; // repeat, no-repeat, repeat-x, repeat-y, space, round
  background-attachment: $attachment; // scroll, fixed, local
  background-size: $size; // contain, cover, auto, 100% auto, auto 100% etc
  background-position: $position; // 0 0, 50% 50%, 100% 100% etc
}